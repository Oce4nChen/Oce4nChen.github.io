[{"title":"","date":"2017-09-12T03:19:36.403Z","path":"2017/09/12/关于vue-js的slot/","text":"title: 关于vue.js的slotdate: 2017-07-12 11:19:36tags: 经验—关于vue.js的slot ， 什么是组件？组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。Slot分发内容①概述：简单来说，假如父组件需要在子组件内放一些DOM，那么这些DOM是显示、不显示、在哪个地方显示、如何显示，就是slot分发负责的活。②默认情况下父组件在子组件内套的内容，是不显示的。例如代码： &lt;div id=&quot;app&quot;&gt; &lt;children&gt; &lt;span&gt;12345&lt;/span&gt;&lt;!--上面这行不会显示--&gt; &lt;/children&gt; &lt;/div&gt; &lt;script&gt; var vm = newVue({ el:&apos;#app&apos;,components:{ children: { //这个无返回值，不会继续派发 template:&quot;&lt;button&gt;为了明确作用范围，使用button标签&lt;/button&gt;&quot;} } }); &lt;/script&gt; 显示内容是一个button按钮，不包含span标签里面的内容；③单个slot简单来说，只使用这个标签的话，可以将父组件放在子组件的内容，放到想让他显示的地方。 &lt;div id=&quot;app&quot;&gt; &lt;children&gt; &lt;span&gt;12345&lt;/span&gt;&lt;!--上面这行不会显示--&gt; &lt;/children&gt; &lt;/div&gt; &lt;script&gt; var vm = newVue({ el:&apos;#app&apos;,components:{ children: { //这个无返回值，不会继续派发 template:&quot;&lt;button&gt;&lt;slot&gt;&lt;/slot&gt;为了明确作用范围，使用button标签&lt;/button&gt;&quot;} } }); &lt;/script&gt; 例如这样写的话，结果是： &lt;button&gt;&lt;span&gt;12345&lt;/span&gt;为了明确作用范围，所以使用button标签&lt;/button&gt; 即父组件放在子组件里的内容，插到了子组件的位置；注意，即使有多个标签，会一起被插入，相当于用父组件放在子组件里的标签，替换了这个标签。④具名slot将放在子组件里的不同html标签放在不同的位置父组件在要分发的标签里添加 slot=”name名” 属性子组件在对应分发的位置的slot标签里，添加name=”name名” 属性，然后就会将对应的标签放在对应的位置了。示例代码： &lt;div id=&quot;app&quot;&gt; &lt;children&gt; &lt;span slot=&quot;first&quot;&gt;12345&lt;/span&gt; &lt;span slot=&quot;second&quot;&gt;56789&lt;/span&gt; &lt;!--上面这行不会显示--&gt; &lt;/children&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: &apos;#app&apos;, components: { children: { //这个无返回值，不会继续派发 template: &quot;&lt;button&gt;&lt;slot name=&apos;first&apos;&gt;&lt;/slot&gt;为了明确作用范围，&lt;slot name=&apos;second&apos;&gt;&lt;/slot&gt;所以使用button标签&lt;/button&gt;&quot; } } }); &lt;/script&gt; 显示结果为：（为了方便查看，已手动调整换行） &lt;button&gt; &lt;span slot=&quot;first&quot;&gt;12345&lt;/span&gt; 为了明确作用范围， &lt;span slot=&quot;second&quot;&gt;56789&lt;/span&gt; 所以使用button标签 &lt;/button&gt; ⑤分发内容的作用域：被分发的内容的作用域，根据其所在模板决定，例如，以上标签，其在父组件的模板中（虽然其被子组件的children标签所包括，但由于他不在子组件的template属性中，因此不属于子组件），则受父组件所控制。示例代码： &lt;div id=&quot;app&quot;&gt; &lt;children&gt; &lt;span slot=&quot;first&quot; @click=&quot;tobeknow&quot;&gt;12345&lt;/span&gt; &lt;span slot=&quot;second&quot;&gt;56789&lt;/span&gt; &lt;!--上面这行不会显示--&gt; &lt;/children&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: &apos;#app&apos;, methods: { tobeknow: function () { console.log(&quot;It is the parent&apos;s method&quot;); } }, components: { children: { //这个无返回值，不会继续派发 template: &quot;&lt;button&gt;&lt;slot name=&apos;first&apos;&gt;&lt;/slot&gt;为了明确作用范围，&lt;slot name=&apos;second&apos;&gt;&lt;/slot&gt;所以使用button标签&lt;/button&gt;&quot; } } }); &lt;/script&gt; 当点击文字12345的区域时（而不是按钮全部），会触发父组件的tobeknow方法。但是点击其他区域时则没有影响。官方教程是这么说的：父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译⑥当没有分发内容时的提示：假如父组件没有在子组件中放置有标签，或者是父组件在子组件中放置标签，但有slot属性，而子组件中没有该slot属性的标签。那么，子组件的slot标签，将不会起到任何作用。除非，该slot标签内有内容，那么在无分发内容的时候，会显示该slot标签内的内容。如示例代码： &lt;div id=&quot;app&quot;&gt; &lt;children&gt; &lt;span slot=&quot;first&quot;&gt;【12345】&lt;/span&gt; &lt;!--上面这行不会显示--&gt; &lt;/children&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: &apos;#app&apos;, components: { children: { //这个无返回值，不会继续派发 template: &quot;&lt;div&gt;&lt;slot name=&apos;first&apos;&gt;&lt;button&gt;【如果没有内容则显示我1】&lt;/button&gt;&lt;/slot&gt;为了明确作用范围，&lt;slot name=&apos;last&apos;&gt;&lt;button&gt;【如果没有内容则显示我2】&lt;/button&gt;&lt;/slot&gt;所以使用button标签&lt;/div&gt;&quot; } } }); &lt;/script&gt; 说明：【1】name=’first’的slot标签被父组件对应的标签所替换（slot标签内部的内容被舍弃）；【2】name=’last’的slot标签，因为没有对应的内容，则显示该slot标签内部的内容。⑦假如想控制子组件根标签的属性【1】首先，由于模板标签是属于父组件的，因此，将子组件的指令绑定在模板标签里，是不可以的（因为他归属于父组件）；【2】假如需要通过父组件控制子组件是否显示（例如v-if或者v-show），那么这个指令显然是属于父组件的（例如放在父组件的data下面）。可以将标签写在子组件的模板上。如代码： &lt;div id=&quot;app&quot;&gt; &lt;button @click=&quot;toshow&quot;&gt;点击让子组件显示&lt;/button&gt; &lt;children v-if=&quot;abc&quot;&gt; &lt;/children&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: &apos;#app&apos;, data: { abc: false }, methods: { toshow: function () { this.abc = !this.abc; } }, components: { children: { //这个无返回值，不会继续派发 template: &quot;&lt;div&gt;这里是子组件&lt;/div&gt;&quot; } } }); &lt;/script&gt; 说明：通过父组件（点击按钮，切换v-if指令的值）控制子组件是否显示。【3】假如需要通过子组件，控制子组件是否显示（比如让他隐藏），那么这个指令显然是属于子组件的（会将值放在子组件的data属性下），那么就不能像上面这么写，而是必须放置在子组件的根标签中。 &lt;div id=&quot;app&quot;&gt; &lt;button @click=&quot;toshow&quot;&gt;点击让子组件显示&lt;/button&gt; &lt;children&gt; &lt;span slot=&quot;first&quot;&gt;【12345】&lt;/span&gt; &lt;!--上面这行不会显示--&gt; &lt;/children&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: &apos;#app&apos;, methods: { toshow: function () { this.$children[0].tohidden = true; } }, components: { children: { //这个无返回值，不会继续派发 template: &quot;&lt;div v-if=&apos;tohidden&apos; @click=&apos;tohide&apos;&gt;这里是子组件&lt;/div&gt;&quot;, data: function () { return { tohidden: true } }, methods: { tohide: function () { this.tohidden = !this.tohidden; } } } } }); &lt;/script&gt; 说明：点击子组件会让子组件消失；点击父组件的按钮，通过更改子组件的tohidden属性，让子组件重新显示。子组件的指令绑定在子组件的模板之中（如此才能调用）；","tags":[]},{"title":"re-test","date":"2017-09-07T16:11:18.000Z","path":"2017/09/08/re-test/","text":"","tags":[]},{"title":"ChattingRoom","date":"2017-03-09T15:04:20.000Z","path":"2017/03/09/ChattingRoom/","text":"小型聊天室 聊天入口 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做这个小Demo的时候遇到一个至今都没解决的一个问题，这个问题搞了我几天，就是一个显示在线人数的功能，我是用了野狗服务器的机制，它里面有一个判断是否连接的方法，每次打开这个网页时，它会首先判断你是否链接上这个服务器，若是true就在线人数+1，好问题来了，这个+1怎么加呢，我首先是想到了再数据库里设置一个键值对，这个键值对就是用来储存在线人数的，每当有人连接上服务器时，他就会update这个value+1，退出或者断网就会触发断开连接这个方法，它会update这个value-1，这只能在2人的时候正常工作，一但多人就会出现互相更新，很混乱，至今没搞懂这个里面是怎么运行的，这里困了好久，于是就放弃了，&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后用了另一种方法，每次有人连接就push一个新的对象，然后关闭或者断网就把这个对象remove掉，接着又遇到一个问题，断开连接的后remove()方法是不带参数的，瞬间奔溃。。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后想了第3个办法，就是设置以个按钮手动退出，让在线人数手动-1( ▼-▼)。。。。 然后分享一首坂井泉水的励志神曲（不要认输）只差一点点了！","tags":[{"name":"小Demo","slug":"小Demo","permalink":"http://yoursite.com/tags/小Demo/"}]},{"title":"小型弹幕","date":"2017-03-02T17:50:25.000Z","path":"2017/03/03/小型弹幕/","text":"#一个弹幕小Demo弹幕体验入口，请使用文明弹幕2333 这个小Demo是仿照freecodecamp社区上的一个项目写的，主要利用了野狗这个免费的小型服务器（挺不错的，主要是免费，不过限制访问用户数，流量忘记限制多少了，对于我们用来学习足够用了），准备用这个服务器写个小型聊天室。 顺便分享一首歌","tags":[{"name":"小Demo","slug":"小Demo","permalink":"http://yoursite.com/tags/小Demo/"}]},{"title":"MovieDay","date":"2017-02-26T14:53:49.000Z","path":"2017/02/26/MovieDay/","text":"#今天一个下午看了两部电影好累(ˉ▽ˉ；)…对今天的电影只有一句话的评价就是：幸好是先把生化危机看了再去看欢乐好声音，哈哈哈哈。（附上一张图，看完才知道那只豪猪是斯嘉丽配的音，惊讶！斯嘉丽女神唱歌也好棒，鼓掌）","tags":[{"name":"daily","slug":"daily","permalink":"http://yoursite.com/tags/daily/"}]},{"title":"只是一张图片","date":"2017-02-23T16:35:50.000Z","path":"2017/02/24/只是一张图片/","text":"","tags":[{"name":"daily","slug":"daily","permalink":"http://yoursite.com/tags/daily/"}]},{"title":"部署hexo到github时遇到的一些问题","date":"2017-02-23T14:44:35.000Z","path":"2017/02/23/设置ssh密钥时遇到的一些问题/","text":"网上许多hexo博客部署的教程，跟着一些hexo&amp;github部署教程做到设置ssh密钥时可能会出现这些错误 Administrator@W7X64-20131108T MINGW64 ~/Desktop $ ssh -T git@github.com socket: Socket operation on non-socket socket: Socket operation on non-socket ssh: connect to host github.com port 22: Socket operation on non-socket 自己网上找了好久都没发现问题在哪（以上命令是在桌面右键Git bush上执行的），网上找有的说是win10的原因，有的人说装32bit的就能解决问题，有的人说ssh密钥没复制好，自己搞了好久都没搞定， 于是我换了用git shell（github官网下的）还是不行，然后我一直改ssh密钥一直试，还是不行，后来我在网上查资料发现可能是密钥命名的问题，自己新建的密钥命名都是id_rsa(这里我都是跟着教程做的，后来才发现我自己的github早就有github_rsa密钥了，我把原来的删了，这可能是版本问题，我看的教程都是前几年的)，于是我把id_rsa和id_rsa.pub改成github_rsa，github_rsa.pub，果然成功了（在git shell上能成功）。成功后是这样的： Warning: Permanently added &apos;github.com,192.30.253.113&apos; (RSA) to the list of known hosts. Hi Oce4nChen! You&apos;ve successfully authenticated, but GitHub does not provide shell access .但是我这里没有和许多教程一样有一个选择（y/n）的过程，不知道为什么，还有一个问题，同样的情况下在git bush上执行还是出现上文中的错误，至今没找到是什么原因。如果你遇到和我一样的问题希望这能帮到你","tags":[{"name":"hexo部署","slug":"hexo部署","permalink":"http://yoursite.com/tags/hexo部署/"}]},{"title":"fblog","date":"2017-02-23T11:07:24.000Z","path":"2017/02/23/fblog/","text":"","tags":[{"name":"daily","slug":"daily","permalink":"http://yoursite.com/tags/daily/"}]},{"title":"Hello World","date":"2017-02-22T14:11:38.952Z","path":"2017/02/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]